#!/usr/bin/env perl

BEGIN {

    use Cwd;
    
    $ENV{'MOJO_HOME'} = getcwd();
    $ENV{'MOJO_MAX_MESSAGE_SIZE'} = 1 * (1024 * 1024 * 1024);
}

use Modern::Perl;
use REST::Google::Search qw/ LOCAL /;
use Crypt::SaltedHash;
use Try::Tiny;
use DateTime::Format::ISO8601;
use HTML::FormatText;
use Archive::Extract;
use Mail::Sendmail;
use File::Copy;
use IO::Dir;
use Encode;

use lib 'lib';
use After5::Model;

our $MODEL = After5::Model->connect('dbi:SQLite:after5detroit.db');

use Mojolicious::Lite;
use Mojo::Util;

any '/' => sub {

    my $self = shift;
    return $self->redirect_to('home');
};

### After5 Client Pages

get '/home' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%home%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Play
    my @play =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%home%'}, types => {like => '%article%'}},
        {order_by => 'position ASC'})->all;

    $self->{'PLAY'} = \@play;

    # Live (Featured LIfestyle)
    my @live =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%home%'}, tags => {like => '%lifestyle%'}},
        {order_by => 'id DESC'})->all;

    $self->{'LIVE'} = \@live;

    # Work
    my @work = $MODEL->resultset('Content')->search(
        {   pages => {like => '%home%'},
            types => {like => '%career%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'WORK'} = \@work;

    # Galleries
    my @galleries = $MODEL->resultset('Content')->search(
        {pages => {like => '%home%'}, types => {like => '%gallery%'}},
        {page => 1, rows => 18, order_by => 'id DESC'}
    )->all;

    $self->{'GALLERIES'} = \@galleries;

    return $self->render('home');

} => 'home';

get '/live' => sub {

    my $self = shift;
    return $self->redirect_to('live_detroit');

} => 'live';

get '/live/birmingham' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # City Life
    my @city_life = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            tags   => {like => '%city_life%'},
            cities => {like => '%birmingham%'}
        },
        {page => 1, rows => 100, order_by => 'id DESC'}
    )->all;

    $self->{'CITY_LIFE'} = \@city_life;

    # Featured Lifestyle
    my @featured_lifestyle = $MODEL->resultset('Content')->search(
        {   pages     => {like => '%live%'},
            types     => {like => '%place%'},
            tags      => {like => '%lifestyle%'},
            cities    => {like => '%birmingham%'},
            interests => {like => '%living%'},
            position  => 1
        },
        {page => 1, rows => 1, order_by => 'id DESC'}
    )->all;

    $self->{'FEATURED_LIFESTYLE'} = \@featured_lifestyle;

    # Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            types  => {like => '%article%'},
            tags   => {like => '%neighbor%'},
            cities => {like => '%birmingham%'}
        },
        {page => 1, rows => 3, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('live_birmingham');

} => 'live_birmingham';

get '/live/detroit' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # City Life
    my @city_life = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            tags   => {like => '%city_life%'},
            cities => {like => '%detroit%'}
        },
        {page => 1, rows => 100, order_by => 'id DESC'}
    )->all;

    $self->{'CITY_LIFE'} = \@city_life;

    # Featured Lifestyle
    my @featured_lifestyle = $MODEL->resultset('Content')->search(
        {   pages     => {like => '%live%'},
            types     => {like => '%place%'},
            tags      => {like => '%lifestyle%'},
            cities    => {like => '%detroit%'},
            interests => {like => '%living%'},
            position  => 1
        },
        {page => 1, rows => 1, order_by => 'id DESC'}
    )->all;

    $self->{'FEATURED_LIFESTYLE'} = \@featured_lifestyle;

    # Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            types  => {like => '%article%'},
            tags   => {like => '%neighbor%'},
            cities => {like => '%detroit%'}
        },
        {page => 1, rows => 3, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('live_detroit');

} => 'live_detroit';

get '/live/ferndale' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # City Life
    my @city_life = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            tags   => {like => '%city_life%'},
            cities => {like => '%ferndale%'}
        },
        {page => 1, rows => 100, order_by => 'id DESC'}
    )->all;

    $self->{'CITY_LIFE'} = \@city_life;

    # Featured Lifestyle
    my @featured_lifestyle = $MODEL->resultset('Content')->search(
        {   pages     => {like => '%live%'},
            types     => {like => '%place%'},
            tags      => {like => '%lifestyle%'},
            cities    => {like => '%ferndale%'},
            interests => {like => '%living%'},
            position  => 1
        },
        {page => 1, rows => 1, order_by => 'id DESC'}
    )->all;

    $self->{'FEATURED_LIFESTYLE'} = \@featured_lifestyle;

    # Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            types  => {like => '%article%'},
            tags   => {like => '%neighbor%'},
            cities => {like => '%ferndale%'}
        },
        {page => 1, rows => 3, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('live_ferndale');

} => 'live_ferndale';

get '/live/royal_oak' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # City Life
    my @city_life = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            tags   => {like => '%city_life%'},
            cities => {like => '%royal_oak%'}
        },
        {page => 1, rows => 100, order_by => 'id DESC'}
    )->all;

    $self->{'CITY_LIFE'} = \@city_life;

    # Featured Lifestyle
    my @featured_lifestyle = $MODEL->resultset('Content')->search(
        {   pages     => {like => '%live%'},
            types     => {like => '%place%'},
            tags      => {like => '%lifestyle%'},
            cities    => {like => '%royal_oak%'},
            interests => {like => '%living%'},
            position  => 1
        },
        {page => 1, rows => 1, order_by => 'id DESC'}
    )->all;

    $self->{'FEATURED_LIFESTYLE'} = \@featured_lifestyle;

    # Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            types  => {like => '%article%'},
            tags   => {like => '%neighbor%'},
            cities => {like => '%royal_oak%'}
        },
        {page => 1, rows => 3, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('live_royal_oak');

} => 'live_royal_oak';

get '/live/:city/neighbors' => [city => qr/\w+/] => sub {

    my $self = shift;

    my $city = $self->param('city');

    unless ($self->param('id')) {

        my $first = $MODEL->resultset('Content')->search(
            {   pages  => {like => '%live%'},
                cities => {like => "%$city%"},
                tags   => {like => '%neighbor%'}
            },
            {order_by => 'id DESC'}
        )->first;
        return $self->redirect_to("/live/$city/neighbors?id=" . $first->id);
    }

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%live%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Neighbors / More Neighbors
    my @neighbors = $MODEL->resultset('Content')->search(
        {   pages  => {like => '%live%'},
            cities => {like => "%$city%"},
            tags   => {like => '%neighbor%'}
        },
        {page => 1, rows => 50, order_by => 'id DESC'}
    )->all;

    $self->{'NEIGHBORS'} = \@neighbors;

    return $self->render('live_neighbors');

} => 'live_neighbors';

get '/work' => sub {

    my $self = shift;
    return $self->redirect_to('work_professional_development');

} => 'work';

get '/work/job_listings' => sub {

    my $self = shift;
    return $self->redirect_to('work_professional_development');

} => 'work_job_listings';

get '/work/professional_development' => sub {

    my $self = shift;

    return $self->redirect_to(
        '/work/professional_development?tags=professional_group')
      unless $self->param('tags');

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%work%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%live%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Work
    if ($self->param('tags')) {

        my $tags = $self->param('tags');

        my @work = $MODEL->resultset('Content')->search(
            {pages => {like => '%work%'}, tags => {like => "%$tags%"}},
            {page => 1, rows => 500, order_by => 'id DESC'},
        )->all;

        $self->{'WORK'} = \@work;
    }

    # Networking
    my @networking = $MODEL->resultset('Content')->search(
        {   types => {like => '%event%'},
            tags  => {like => '%networking%'}
        },
        {page => 1, rows => 500, order_by => 'start_datetime ASC'}
    )->all;

    $self->{'NETWORKING'} = \@networking;

    return $self->render('work_professional_development');

} => 'work_professional_development';

get '/play' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%play%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # People
    my @features = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%people%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'FEATURES'} = \@features;

    # Articles
    my @buzz = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%article%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'BUZZ'} = \@buzz;

    # Places
    my @places = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%place%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'PLACES'} = \@places;

    # Events
    my @events =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%event%'}},
        {order_by => 'start_datetime ASC'})->all;

    $self->{'EVENTS'} = \@events;

    return $self->render('play');

} => 'play';

get '/play/people' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%play%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # People / More People
    my @people = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%people%'}
        },
        {page => 1, rows => 50, order_by => 'id DESC'},
    )->all;

    $self->{'PEOPLE'} = \@people;

    return $self->render('play_people');

} => 'play_people';

get '/play/places' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%play%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Featured Places
    my @featured_places = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%place%'}
        },
        {page => 1, rows => 100, order_by => 'id DESC'},
    )->all;

    $self->{'FEATURED_PLACES'} = \@featured_places;

    return $self->render('play_places');

} => 'play_places';

get '/play/articles' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%play%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Articles / More Articles
    my @articles = $MODEL->resultset('Content')->search(
        {   pages => {like => '%play%'},
            types => {like => '%article%'},
            tags  => {like => '%article%'}
        },
        {page => 1, rows => 50, order_by => 'id DESC'}
    )->all;

    $self->{'ARTICLES'} = \@articles;

    return $self->render('play_articles');

} => 'play_articles';

get '/play/events' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%play%'}, types => {like => '%ad_header%'}})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Upcoming Events
    my @upcoming_events = $MODEL->resultset('Content')->search(
        {pages => {like => '%play%'}, types => {like => '%event%'}},
        {page => 1, rows => 500, order_by => 'start_datetime ASC'}
    )->all;

    $self->{'UPCOMING_EVENTS'} = \@upcoming_events;

} => 'play_events';

get '/photos' => sub {

    my $self = shift;

    unless ($self->param('id')) {

        my $first =
          $MODEL->resultset('Content')
          ->search(
            {pages => {like => '%photos%'}, types => {like => '%gallery%'}},
            {order_by => 'id DESC'})->first;
        return $self->redirect_to('/photos?id=' . $first->id);
    }

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%photos%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Galleries
    my @galleries =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%photos%'}, types => {like => '%gallery%'}},
        {order_by => 'id DESC'})->all;

    $self->{'GALLERIES'} = \@galleries;

    return $self->render('photos');

} => 'photos';

get '/about' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Staff
    my @staff = $MODEL->resultset('Content')->search(
        {   pages => {like => '%about'},
            tags  => {like => '%after5_staff%'}
        },
        {order_by => 'position ASC'}
    )->all;

    $self->{'STAFF'} = \@staff;

    # Press
    my @press = $MODEL->resultset('Content')->search(
        {   pages => {like => '%about'},
            tags  => {like => '%after5_press%'}
        },
        {order_by => 'id DESC'}
    )->all;

    $self->{'PRESS'} = \@press;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('about');

} => 'about';

get '/about/contact' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('about_contact');

} => 'about_contact';

get '/about/newsletter' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%about%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search({pages => {like => '%play%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    $self->{'STOCK_PHOTO'} = stock_photo();

    return $self->render('about_newsletter');

} => 'about_newsletter';

get '/search' => sub {

    my $self = shift;

    # Ads
    my @ads =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%search%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'})->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%search%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    # Search Results

    my @search_results;

    if ($self->param('types') eq 'event') {

        @search_results =
          $MODEL->resultset('Content')
          ->search(undef,
            {page => 1, rows => 1000, order_by => 'start_datetime ASC'})->all;
    }
    else {

        @search_results =
          $MODEL->resultset('Content')
          ->search(undef, {page => 1, rows => 1000, order_by => 'id DESC'})
          ->all;
    }

    $self->{'SEARCH_RESULTS'} = \@search_results;

    return $self->render('search');

} => 'search';

get '/:id' => [id => qr/\d+/] => sub {

    my $self = shift;

    # Ads
    my @ads = $MODEL->resultset('Content')->search(
        {pages => {like => '%permalink%'}, types => {like => '%ad_header%'}},
        {order_by => 'id DESC'}
    )->all;

    $self->{'ADS'} = \@ads;

    # Ads Block
    my @ads_block =
      $MODEL->resultset('Content')
      ->search(
        {pages => {like => '%permalink%'}, types => {like => '%ad_block%'}})
      ->all;

    $self->{'ADS_BLOCK'} = \@ads_block;

    if ($self->param('id')) {

        my $id =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;
        $self->{'ID'} = $id;
    }

    return $self->render('permalink');

} => 'permalink';

### After5 Admin Pages

get '/login' => sub {

    my $self = shift;

    return $self->redirect_to('dashboard') if $self->session('admin');
    return $self->render('login');

} => 'login';

get '/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('home');

} => 'logout';

get '/dashboard' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    # Home
    my @home =
      $MODEL->resultset('Content')->search({pages => {like => '%home%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'HOME'} = \@home;

    # Live
    my @live =
      $MODEL->resultset('Content')->search({pages => {like => '%live%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'LIVE'} = \@live;

    # Work
    my @work =
      $MODEL->resultset('Content')->search({pages => {like => '%work%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'WORK'} = \@work;

    # Play
    my @play =
      $MODEL->resultset('Content')->search({pages => {like => '%play%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'PLAY'} = \@play;

    # Photos
    my @photos =
      $MODEL->resultset('Content')->search({pages => {like => '%photos%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'PHOTOS'} = \@photos;

    # About
    my @about =
      $MODEL->resultset('Content')->search({pages => {like => '%about%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'ABOUT'} = \@about;

    # None
    my @none =
      $MODEL->resultset('Content')->search({pages => {like => '%none%'}},
        {page => 1, rows => 15, order_by => 'id DESC'})->all;
    $self->{'NONE'} = \@none;

    # New Content
    my @new_content =
      $MODEL->resultset('Content')
      ->search(undef,
        {page => 1, rows => 25, order_by => 'create_datetime DESC'})->all;

    $self->{'NEW_CONTENT'} = \@new_content;

    return $self->render('dashboard');

} => 'dashboard';

get '/editor' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    # Content
    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    $self->{'CONTENT'} = $content;

    # Recent Updates
    my @recent_updates =
      $MODEL->resultset('Content')
      ->search(undef,
        {page => 1, rows => 25, order_by => 'modified_datetime DESC'})->all;

    $self->{'RECENT_UPDATES'} = \@recent_updates;

    return $self->render('editor');

} => 'editor';

get '/settings' => sub {

    my $self = shift;

    return $self->redirect_to('login') unless $self->session('admin');

    # Settings
    my $settings = $MODEL->resultset('Settings')->first;
    $self->{'SETTINGS'} = $settings;

    return $self->render('settings');

} => 'settings';

get '/analytics' => sub {

    my $self = shift;

    # Views
    my @views =
      $MODEL->resultset('Content')
      ->search(undef, {page => 1, rows => 500, order_by => 'views DESC'})
      ->all;

    $self->{'VIEWS'} = \@views;

    # Clicks
    my @clicks =
      $MODEL->resultset('Content')
      ->search(undef, {page => 1, rows => 500, order_by => 'clicks DESC'})
      ->all;

    $self->{'CLICKS'} = \@clicks;

    ## Most Popular
    #my @most_popular =
    #  $MODEL->resultset('Content')->search(undef, {page => 1, rows => 1000})
    #  ->all;
    #
    #my @most_popular_sorted;
    #
    #for (@most_popular) {
    #
    #    my $score = ($_->views + $_->clicks);
    #
    #    unless ($score == 0) {
    #        $most_popular_sorted[$score] = $_;
    #    }
    #}
    #
    #$self->{'MOST_POPULAR'} = \@most_popular_sorted;

    return $self->render('analytics');

} => 'analytics';

### After5 Form API

post '/api/login' => sub {

    my $self = shift;

    my @settings =
      $MODEL->resultset('Settings')->search({admin => $self->param('admin')});

    for (@settings) {

        if (Crypt::SaltedHash->validate(
                $_->password, $self->param('password')
            )
          )
        {
            $self->session(admin => $_->admin);
        }
    }

    return $self->redirect_to('dashboard');

};

post '/api/logout' => sub {

    my $self = shift;

    $self->session(expires => 1)
      and return $self->redirect_to('home');

};

post '/api/content/create' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @pages, @photos);

    my $new_content =
      $MODEL->resultset('Content')
      ->create({create_datetime => DateTime->now});

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({start_datetime => $start_datetime});

    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({stop_datetime => $stop_datetime});

    }

    if ($self->param('author')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({author => encode_string($self->param('author'))});
    }

    if ($self->param('title')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({title => encode_string($self->param('title'))});
    }

    if ($self->param('body')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({body => encode_string($self->param('body'))});
    }

    if ($self->param('interests')) {

        push @interests, $_ for $self->param('interests');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({interests => "@interests"});
    }

    if ($self->param('pages')) {

        push @pages, $_ for $self->param('pages');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({pages => "@pages"});
    }

    if ($self->param('types')) {

        push @types, $_ for $self->param('types');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({types => "@types"});
    }

    if ($self->param('tags')) {

        push @tags, $_ for $self->param('tags');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({tags => "@tags"});
    }

    if ($self->param('cities')) {

        push @cities, $_ for $self->param('cities');

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({cities => "@cities"});
    }

    if ($self->param('position')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({position => $self->param('position')});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $new_content->id})
              ->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
              );
        }
    }

    if ($self->param('venue')) {

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->req->upload('photos')) {

        push @photos,
          process_photo($self->req->upload('photos'), $new_content->id);

        $MODEL->resultset('Content')->search({id => $new_content->id})
          ->update({photos => "@photos"})
          if scalar @photos >= 1;
    }

    my $id = $new_content->id;

    my $text =

      'After5 content successfully created.'
      . "<a href='/$id'>Click here to view permalink page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");
};

post '/api/content/update' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my (@tags, @cities, @types, @interests, @pages, @photos);

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    if (($self->param('start_date')) and ($self->param('start_time'))) {

        #try {

        my $start_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('start_date') . $self->param('start_time'));

        $content->update({start_datetime => $start_datetime});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}

    }

    if (($self->param('stop_date')) and ($self->param('stop_time'))) {

        #try {

        my $stop_datetime = DateTime::Format::ISO8601->parse_datetime(
            $self->param('stop_date') . $self->param('stop_time'));

        $content->update({stop_datetime => $stop_datetime});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('author')) {

        #try {

        $content->update({author => encode_string($self->param('author'))});

        #}
        #catch {
        #
        #    error_message('update', $self->param('id'), $_);
        #}
    }

    if ($self->param('title')) {

        #try {

        $content->update({title => encode_string($self->param('title'))});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('body')) {

        #try {

        $content->update({body => encode_string($self->param('body'))});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('interests')) {

        #try {

        push @interests, $_ for $self->param('interests');
        $content->update({interests => "@interests"});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('pages')) {

        #try {

        push @pages, $_ for $self->param('pages');
        $content->update({pages => "@pages"});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('types')) {

        #try {

        push @types, $_ for $self->param('types');
        $content->update({types => "@types"});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('tags')) {

        #try {

        push @tags, $_ for $self->param('tags');
        $content->update({tags => "@tags"});

        #}
        #catch {
        #
        #    error_message($self, 'update', $self->param('id'), $_);
        #}
    }

    if ($self->param('cities')) {

        push @cities, $_ for $self->param('cities');

        $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->update({cities => "@cities"});
    }

    if ($self->param('position')) {

        $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->update({position => $self->param('position')});
    }

    if ($self->param('link')) {

        $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->update({link => $self->param('link')});
    }

    if ($self->param('address')) {

        my @results = google_local($self->param('address'));

        for (@results) {

            $MODEL->resultset('Content')->search({id => $self->param('id')})
              ->update(
                {   address => $_->streetAddress . ', ' . $_->city,
                    lat     => $_->lat,
                    lng     => $_->lng
                }
              );
        }
    }

    if ($self->param('venue')) {

        $content->update({venue => encode_string($self->param('venue'))});
    }

    if ($self->param('default_photo')) {

        @photos = split /\s+/, $content->photos;

        my $default = $self->param('default_photo');

        for (my $i = 0; $i <= scalar @photos; $i++) {

            undef $photos[$i] if $photos[$i] =~ m/^$default/i;
        }

        unshift @photos, $default;

        $content->update({photos => "@photos"});
    }

    if ($self->req->upload('photos')) {

        push @photos,
          process_photo($self->req->upload('photos'), $self->param('id'));

        $content->update({photos => "@photos"})
          if scalar @photos >= 1;
    }

    $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->update({modified_datetime => DateTime->now});

    my $id = $self->param('id');

    my $text =

      'Content updated.'
      . "<a href='/$id'>You can click here to view the permalink page.</a>";

    return $self->redirect_to("/editor?mode=update&id=$id&message=$text");

};

any '/api/content/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $content =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @content_photos = split /\s+/, $content->photos;

    unlink "public/$_" for @content_photos;

    $content->delete;

    my $text = 'After5 content successfully removed.';
    return $self->redirect_to("/dashboard?message=$text");

};

post '/api/contact/message' => sub {

    my $self = shift;

    if ((       $self->param('message')
            and ($self->param('name'))
            and ($self->param('email'))
            and ($self->param('subject'))
        )
      )
    {

        my @results = google_local($self->param('city_state_zip'));

        for (@results) {

            my $message =
                "\n\nContact Message from After5...\n\n\tName: "
              . $self->param('name')
              . "\n\n\tEmail: "
              . $self->param('email')
              . "\n\n\tCity/State or Zip: " . ''
              . $_->city . ','
              . $_->region
              . "\n\n\tPhone: "
              . $self->param('phone')
              . "\n\nMessage: \n\n"
              . $self->param('message') . "\n\n";

            my %mail = (

                To      => 'kerry@after5detroit.com',
                Cc      => 'dan@thoughtpivot.com',
                From    => 'no-reply@after5detroit.com',
                Subject => 'after5detroit: ' . $self->param('subject'),
                Message => $message
            );

            sendmail(%mail) or die $Mail::Sendmail::error;

            print "OK. Log says:\n", $Mail::Sendmail::log;

            my $text = 'Message successfully sent!';
            return $self->redirect_to("/about/contact?message=$text");
        }
    }
    else {

        my $text = 'Error sending message. Please try again!';
        return $self->redirect_to("/about/contact?message=$text");
    }

    return $self->redirect_to('about_contact');
};

post '/api/newsletter/message' => sub {

    my $self = shift;

    if ((       $self->param('city_state_zip')
            and ($self->param('name'))
            and ($self->param('email'))
        )
      )
    {

        my @results = google_local($self->param('city_state_zip'));

        for (@results) {

            my $message =
                "\n\nNewsletter Sign-Up from After5...\n\n\tName: "
              . $self->param('name')
              . "\n\n\tAge: "
              . $self->param('age')
              . "\n\n\tGender: "
              . $self->param('gender')
              . "\n\n\tEmail: "
              . $self->param('email')
              . "\n\n\tCity/State or Zip: " . ''
              . $_->city . ','
              . $_->region . "\n\n";

            my %mail = (

                To      => 'kerry@after5detroit.com',
                Cc      => 'dan@thoughtpivot.com',
                From    => 'no-reply@after5detroit.com',
                Subject => 'after5detroit: Newsletter Sign-Up!',
                Message => $message
            );

            sendmail(%mail) or die $Mail::Sendmail::error;

            print "OK. Log says:\n", $Mail::Sendmail::log;

            my $text = 'Message successfully sent!';
            return $self->redirect_to("/about/newsletter?message=$text");
        }
    }
    else {

        my $text = 'Error sending message. Please try again!';
        return $self->redirect_to("/about/newsletter?message=$text");
    }

    return $self->redirect_to('about_newsletter');
};

post '/api/photo/remove' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    my $photo_madness =
      $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->single;

    my @photos = split /\s+/, $photo_madness->photos;

    my $path = $self->param('photo');

    for (my $i = 0; $i < scalar @photos; $i++) {

        if ($photos[$i] =~ m/^$path/x) {

            undef $photos[$i] and unlink "public/$path";

        }
    }

    $MODEL->resultset('Content')->search({id => $self->param('id')})
      ->update({photos => "@photos"})
      if scalar @photos >= 1;

};

post '/api/settings/update' => sub {

    my $self = shift;

    return $self->redirect_to('home') unless $self->session('admin');

    $MODEL->resultset('Settings')->update({admin => $self->param('admin')});

    if (    ($self->param('password_1') ne '')
        and ($self->param('password_1') eq $self->param('password_2')))
    {

        my $crypt = Crypt::SaltedHash->new(algorithm => 'SHA-256');
        $crypt->add($self->param('password_1'));

        my $password = $crypt->generate;

        $MODEL->resultset('Settings')->update({password => $password});
    }

    $MODEL->resultset('Settings')->update({about => $self->param('about')});

    my $text = 'After5 settings successfully updated.';
    return $self->redirect_to("/settings?message=$text");

};

post '/api/analytics/:type' => [type => qr/\w+/] => sub {

    my $self = shift;

    if ($self->param('id')) {

        my $content =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;

        given ($self->param('type')) {

            when ('views') {

                say "The views are: " . $content->views;

                $content->update({views => $content->views + 1});
            }

            when ('clicks') {

                say "The clicks are: " . $content->clicks;

                $content->update({clicks => $content->clicks + 1});
            }

            default {

                $content->close;
            }
        }
    }

    return;
};

## After5 Dojo JSON Data Stores

get '/dojox/image/data.json' => sub {

    my $self = shift;

    use Mojo::JSON;
    my $json = Mojo::JSON->new;

    if ($self->param('id')) {

        my $gallery =
          $MODEL->resultset('Content')->search({id => $self->param('id')})
          ->single;

        my @gallery;

        for (split /\s+/, $gallery->photos) {

            my %items = (

                'thumb' => "$_",
                'large' => "$_",
                'title' => $gallery->title,
                'link'  => ''                # I've disabled this temporarily.
            );

            push @gallery, \%items;
        }

        my $string = $json->encode({items => \@gallery});
        return $self->render(text => $string);
    }

};

### After5 Tools

sub filter_content {

    my ($self, $content) = shift;

}

sub process_photo {

    my ($upload, $id) = @_;

    my (@new_photos, @existing_photos);

    if ($upload->filename =~ m/zip$/i) {

        my $zip_file = $upload->filename;
        $upload->move_to("/tmp/$zip_file");

        my $archive = Archive::Extract->new(archive => "/tmp/$zip_file");

        if ($archive->is_zip) {

            my $ok = $archive->extract(to => '/tmp/');

            for (@{$archive->files}) {

                unless (-d "/tmp/$_") {

                    if ($_ =~ m/jpg|png|gif$/i) {

                        my $checksum = Mojo::Util::md5_sum($_);
                        my $path     = "/photos/$checksum.img";

                        move "/tmp/$_", "public/$path"
                          and push @new_photos, $path;

                    }
                }
            }

            return @new_photos;
        }
    }
    elsif ($upload->filename =~ m/jpg|png|gif$/i) {

        my $checksum = Mojo::Util::md5_sum($upload->filename);
        my $path     = "/photos/$checksum.img";

        $upload->move_to('public' . $path);

        push @new_photos, $path;
        return @new_photos;
    }

    return;
}

sub google_local {

    REST::Google::Search->service(LOCAL);

    my $response = REST::Google::Search->new(q => shift);

    if ($response->responseStatus == 200) {

        my $data = $response->responseData;
        return $data->results;
    }

    return;
}

sub encode_string {

    return Encode::encode('ISO-8859-1', shift);
}

sub stock_photo {

    my $self = shift;

    my $photos = IO::Dir->new("public/stock/");

    my @random_stock;

    if (defined $photos) {

        while (defined($_ = $photos->read)) {

            push @random_stock, $_
              unless -d $_ or $_ =~ m/^\./g;
        }

        undef $photos;
    }

    my $stock_photo =
      "/stock/" . $random_stock[int(rand(scalar @random_stock))];

    return $stock_photo;
}

sub error_message {

    my ($self, $mode, $id, $text) = @_;

    given ($mode) {

        when ('update') {

            return $self->redirect_to(
                "/editor?mode=update&id=$id&message=$text");
        }

        #when ('create') {
        #
        #}
        #default {
        #
        #}
    }

    return;
}

#app->log->level('info');
app->secret('after5detroit.com');
app->start();
